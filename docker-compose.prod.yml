# Production Docker Compose with PostgreSQL
version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: pkp-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pkp_dashboard}
      - POSTGRES_USER=${POSTGRES_USER:-pkp_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - pkp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pkp_admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Material Delivery Dashboard (Production)
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pkp-material-dashboard
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - FLASK_DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pkp_admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pkp_dashboard}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - N8N_TO_FLASK_API_KEY=${N8N_TO_FLASK_API_KEY}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_BASE_URL=${N8N_BASE_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL}
      - CURRENCY=${CURRENCY:-AED}
      - TIMEZONE=${TIMEZONE:-Asia/Dubai}
    volumes:
      - dashboard-uploads:/app/static/uploads
      - ./logs:/app/logs
    networks:
      - pkp-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache (Optional - for session management)
  redis:
    image: redis:7-alpine
    container_name: pkp-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - pkp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # n8n Automation Platform
  n8n:
    image: n8nio/n8n:latest
    container_name: pkp-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-pkp_admin}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USERNAME:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${N8N_HOST}
      - GENERIC_TIMEZONE=${TIMEZONE:-Asia/Dubai}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=queue
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - pkp-network
    depends_on:
      postgres:
        condition: service_healthy

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: pkp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - certbot-webroot:/var/www/certbot
    networks:
      - pkp-network
    depends_on:
      - dashboard
      - n8n
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot
    container_name: pkp-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - pkp-network

volumes:
  postgres-data:
    driver: local
  dashboard-uploads:
    driver: local
  n8n-data:
    driver: local
  redis-data:
    driver: local
  nginx-cache:
    driver: local
  certbot-webroot:
    driver: local

networks:
  pkp-network:
    driver: bridge
