"""
Test script for file upload functionality
Creates a test PDF and uploads it to the system
"""
import requests
import os
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

# Create a test PDF file
def create_test_pdf():
    """Create a sample PO document PDF"""
    filename = "test_purchase_order.pdf"
    c = canvas.Canvas(filename, pagesize=letter)
    
    # Title
    c.setFont("Helvetica-Bold", 20)
    c.drawString(100, 750, "PURCHASE ORDER")
    
    # PO Details
    c.setFont("Helvetica", 12)
    c.drawString(100, 700, "PO Number: PO-TEST-2025-001")
    c.drawString(100, 680, "Date: October 3, 2025")
    c.drawString(100, 660, "Vendor: ABC Steel Suppliers")
    
    # Material Details
    c.drawString(100, 620, "Material: TMT Bars Fe 500")
    c.drawString(100, 600, "Quantity: 50 Tonnes")
    c.drawString(100, 580, "Unit Price: ‚Çπ65,000 per Tonne")
    c.drawString(100, 560, "Total Amount: ‚Çπ32,50,000")
    
    # Delivery Details
    c.drawString(100, 520, "Delivery Location: PKP Construction Site #1")
    c.drawString(100, 500, "Expected Delivery: October 15, 2025")
    
    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.drawString(100, 100, "Generated by Material Delivery Dashboard - Phase 1.4 Testing")
    
    c.save()
    print(f"‚úì Created test PDF: {filename}")
    return filename

# Test file upload
def test_upload():
    """Test the file upload endpoint"""
    url = "http://127.0.0.1:5000/api/upload"
    
    # Create test PDF
    pdf_file = create_test_pdf()
    
    try:
        # Prepare file for upload
        with open(pdf_file, 'rb') as f:
            files = {'file': (pdf_file, f, 'application/pdf')}
            data = {
                'file_type': 'purchase_order',
                'uploaded_by': 'Test Script',
                'entity_type': 'material',
                'entity_id': '1'  # Link to first material
            }
            
            print("\nüì§ Uploading test file...")
            response = requests.post(url, files=files, data=data)
            
            if response.status_code == 201:
                result = response.json()
                print("‚úÖ Upload successful!")
                print(f"   File ID: {result['file']['id']}")
                print(f"   Filename: {result['file']['filename']}")
                print(f"   Original: {result['file']['original_filename']}")
                print(f"   Size: {result['file']['file_size']} bytes")
                print(f"   Status: {result['file']['processing_status']}")
                print(f"   Path: {result['file']['file_path']}")
                return True
            else:
                print(f"‚ùå Upload failed: {response.status_code}")
                print(f"   Error: {response.json()}")
                return False
                
    except Exception as e:
        print(f"‚ùå Error during upload: {e}")
        return False
    finally:
        # Clean up test file
        if os.path.exists(pdf_file):
            os.remove(pdf_file)
            print(f"üßπ Cleaned up test file")

# Test file retrieval
def test_get_files():
    """Test the file listing endpoint"""
    url = "http://127.0.0.1:5000/api/files"
    
    try:
        print("\nüìã Fetching uploaded files...")
        response = requests.get(url)
        
        if response.status_code == 200:
            result = response.json()
            files = result['files']
            print(f"‚úÖ Found {len(files)} file(s)")
            
            for file in files:
                print(f"\n   File: {file['original_filename']}")
                print(f"   Type: {file['file_type']}")
                print(f"   Status: {file['processing_status']}")
                print(f"   Uploaded: {file['uploaded_at']}")
            return True
        else:
            print(f"‚ùå Failed to get files: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error getting files: {e}")
        return False

# Test file filtering
def test_filter_files():
    """Test file filtering by type"""
    url = "http://127.0.0.1:5000/api/files?file_type=purchase_order"
    
    try:
        print("\nüîç Testing file filtering (purchase_order)...")
        response = requests.get(url)
        
        if response.status_code == 200:
            result = response.json()
            files = result['files']
            print(f"‚úÖ Found {len(files)} purchase order file(s)")
            return True
        else:
            print(f"‚ùå Failed to filter files: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error filtering files: {e}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("  File Upload System - Phase 1.4 Testing")
    print("=" * 60)
    
    # Run tests
    test_results = []
    
    print("\nüß™ TEST 1: File Upload")
    test_results.append(("Upload", test_upload()))
    
    print("\nüß™ TEST 2: List Files")
    test_results.append(("List Files", test_get_files()))
    
    print("\nüß™ TEST 3: Filter Files")
    test_results.append(("Filter Files", test_filter_files()))
    
    # Summary
    print("\n" + "=" * 60)
    print("  TEST SUMMARY")
    print("=" * 60)
    
    passed = sum(1 for _, result in test_results if result)
    total = len(test_results)
    
    for test_name, result in test_results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {status} - {test_name}")
    
    print(f"\n  Total: {passed}/{total} tests passed")
    print("=" * 60)
